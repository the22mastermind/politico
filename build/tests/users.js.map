{"version":3,"sources":["../../src/tests/users.js"],"names":["expect","chai","use","chaiHttp","should","describe","it","request","app","get","end","err","res","status","to","equal","body","have","property","message","post","send","firstname","lastname","othername","email","password","phonenumber","passporturl","isadmin","console","log","data","be","a"],"mappings":"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","file":"users.js","sourcesContent":["import chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport app from '../index';\n\nconst { expect } = chai;\nchai.use(chaiHttp);\nchai.should();\n\n// HOMEPAGE\ndescribe('GET /', () => {\n  it('Should return status code 200 and message', () => {\n    chai.request(app)\n      .get('/')\n      .end((err, res) => {\n        expect(res.status).to.equal(200);\n        expect(res.body).to.have.property('status');\n        expect(res.body).to.have.property('message');\n        expect(res.body.message).to.equal('Welcome to Politico!');\n      });\n  });\n});\n\ndescribe('POST /', () => {\n  it('Should return status code 404', () => {\n    chai.request(app)\n      .post('/')\n      .end((err, res) => {\n        expect(res.status).to.equal(404);\n      });\n  });\n});\n\n// SIGN UP\ndescribe('POST /api/v1/users/signup', () => {\n  it('Should return status code 201', () => {\n    chai.request(app)\n      .post('/api/v1/users/signup')\n      .send({\n      \tfirstname: 'John',\n      \tlastname: 'Doe',\n      \tothername: 'aka',\n      \temail: 'johndoe@gmail.com',\n      \tpassword: 'johndoe@2019',\n      \tphonenumber: '+250787770000',\n      \tpassporturl: 'https://www.google.com',\n      \tisadmin: true\n      })\n      .end((err, res) => {\n        console.log(res.body);\n        expect(res.status).to.equal(201);\n        expect(res.body).to.have.property('status');\n        expect(res.body).to.have.property('data');\n        expect(res.body).to.have.property('message');\n        expect(res.body.message).to.equal('Success!');\n        expect(res.body.data).to.be.a('array');\n      });\n  });\n});\n\n// Invalid signup form\ndescribe('POST /api/v1/users/signup', () => {\n  it('Should return status code 400', () => {\n    chai.request(app)\n      .post('/api/v1/users/signup')\n      .send({\n      \tfirstname: '',\n      \tlastname: '',\n      \tothername: '',\n      \temail: 'johndoe@gmail.com',\n      \tpassword: 'johndoe@2019',\n      \tphonenumber: '',\n      \tpassporturl: 'https://www.google.com',\n      \tisadmin: true\n      })\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        expect(res.body).to.have.property('status');\n        expect(res.body).to.have.property('error');\n      });\n  });\n});\n// Register an already registered user\ndescribe('POST /api/v1/users/signup', () => {\n  it('Should return status code 400', () => {\n    // Register user\n    chai.request(app)\n      .post('/api/v1/users/signup')\n      .send({\n        firstname: 'John',\n        lastname: 'Doe',\n        othername: 'aka',\n        email: 'johndoe1@gmail.com',\n        password: 'johndoe@2019',\n        phonenumber: '+250787770000',\n        passporturl: 'https://www.google.com',\n        isadmin: true\n      })\n      .end((err, res) => {\n        expect(res.status).to.equal(201);\n        expect(res.body).to.have.property('status');\n        expect(res.body).to.have.property('data');\n        expect(res.body).to.have.property('message');\n        expect(res.body.message).to.equal('Success!');\n        expect(res.body.data).to.be.a('array');\n      });\n    // Try registering same email again\n    chai.request(app)\n      .post('/api/v1/users/signup')\n      .send({\n        firstname: 'John',\n        lastname: 'Doe',\n        othername: 'aka',\n        email: 'johndoe1@gmail.com',\n        password: 'johndoe@2019',\n        phonenumber: '+250787770000',\n        passporturl: 'https://www.google.com',\n        isadmin: true\n      })\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        expect(res.body).to.have.property('status');\n      });\n  });\n});\n"]}