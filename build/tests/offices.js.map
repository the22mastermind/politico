{"version":3,"sources":["../../src/tests/offices.js"],"names":["expect","chai","use","chaiHttp","should","describe","it","request","app","post","send","type","name","end","err","res","status","to","equal","body","have","property","data","be","a","id","get","officeId"],"mappings":"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","file":"offices.js","sourcesContent":["import chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport app from '../index';\n\nconst { expect } = chai;\nchai.use(chaiHttp);\nchai.should();\n\n// CREATE OFFICE\ndescribe('POST /api/v1/offices', () => {\n  it('Should return status code 201', () => {\n    chai.request(app)\n      .post('/api/v1/offices')\n      .send({\n        type: 'Political Party 1',\n        name: 'Member of Senate',\n      })\n      .end((err, res) => {\n        expect(res.status).to.equal(201);\n        expect(res.body).to.have.property('status');\n        expect(res.body).to.have.property('data');\n        expect(res.body.data).to.be.a('array');\n        expect(res.body.data[0].id).to.be.a('number');\n        expect(res.body.data[0].type).to.be.a('string');\n        expect(res.body.data[0].name).to.be.a('string');\n      });\n  });\n});\n\ndescribe('POST /api/v1/offices', () => {\n  it('Should return status code 400', () => {\n    chai.request(app)\n      .post('/api/v1/offices')\n      .send({\n      \tname: '',\n      })\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        expect(res.body).to.have.property('status');\n        expect(res.body).to.have.property('error');\n      });\n  });\n});\n\n// ***********************************\n\n// VIEW ALL OFFICES\ndescribe('GET /api/v1/offices', () => {\n  it('Should return status code 200', () => {\n    chai.request(app)\n      .get('/api/v1/offices')\n      .end((err, res) => {\n        expect(res.status).to.equal(200);\n        expect(res.body).to.have.property('status');\n        expect(res.body).to.have.property('data');\n        expect(res.body.data).to.be.a('array');\n        expect(res.body.data[0].id).to.be.a('number');\n        expect(res.body.data[0].type).to.be.a('string');\n        expect(res.body.data[0].name).to.be.a('string');\n      });\n  });\n});\n\n// ***********************************\n\n// VIEW SPECIFIC POLITICAL OFFICE\ndescribe('GET /api/v1/offices/<office-id>', () => {\n  it('Should return status code 200', () => {\n    let officeId = 1;\n    chai.request(app)\n      .get(`/api/v1/offices/${officeId}`)\n      .end((err, res) => {\n        expect(res.status).to.equal(200);\n        expect(res.body).to.have.property('status');\n        expect(res.body).to.have.property('data');\n        expect(res.body.data).to.be.a('object');\n        expect(res.body.data.id).to.be.a('number');\n        expect(res.body.data.type).to.be.a('string');\n        expect(res.body.data.name).to.be.a('string');\n      });\n  });\n});\n\n// Unexisting office id\ndescribe('GET /api/v1/offices/<office-id>', () => {\n  it('Should return status code 404', () => {\n    let officeId = 100;\n    chai.request(app)\n      .get(`/api/v1/offices/${officeId}`)\n      .end((err, res) => {\n        expect(res.status).to.equal(404);\n        expect(res.body).to.have.property('status');\n      });\n  });\n});\n\n// Invalid office id\ndescribe('GET /api/v1/offices/<office-id>', () => {\n  it('Should return status code 400', () => {\n    let officeId = 'astring';\n    chai.request(app)\n      .get(`/api/v1/offices/${officeId}`)\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        expect(res.body).to.have.property('status');\n      });\n  });\n});\n\n// ***********************************\n"]}