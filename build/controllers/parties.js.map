{"version":3,"sources":["../../src/controllers/parties.js"],"names":["exports","createParty","req","res","validator","validateCreateParty","body","error","status","json","details","message","party","partyModel","find","p","name","trim","newParty","id","length","hqaddress","logourl","registeredon","format","push","data","viewAllParties","viewSingleParty","params","Number","isInteger","parseInt","editParty","validateEditParty","newPartyName","deleteParty","map","parties","index","splice"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;AACAA,QAAQC,WAAR,GAAsB,gBAAgBC,GAAhB,EAAqBC,GAArB,EAA0B;AAC/C;AAD+C,6BAE7BC,qBAAUC,mBAAV,CAA8BH,IAAII,IAAlC,CAF6B;AAAA,KAEvCC,KAFuC,yBAEvCA,KAFuC;;AAG/C,KAAIA,KAAJ,EAAW;AACV,SAAOJ,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BD,WAAQ,GADmB;AAE3BD,UAAOA,MAAMG,OAAN,CAAc,CAAd,EAAiBC;AAFG,GAArB,CAAP;AAIA;AACD;AACA;AACA,KAAMC,QAAQ,MAAMC,kBAAWC,IAAX,CAAgB;AAAA,SAAKC,EAAEC,IAAF,KAAWd,IAAII,IAAJ,CAASU,IAAT,CAAcC,IAAd,EAAhB;AAAA,EAAhB,CAApB;AACA,KAAIL,KAAJ,EAAW;AACV,SAAOT,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BD,WAAQ,GADmB;AAE3BD,mCAA8BL,IAAII,IAAJ,CAASU,IAAvC;AAF2B,GAArB,CAAP;AAIA;AACD;AACA,KAAME,WAAW;AAChBC,MAAIN,kBAAWO,MAAX,GAAoB,CADR;AAEhBJ,QAAMd,IAAII,IAAJ,CAASU,IAAT,CAAcC,IAAd,EAFU;AAGhBI,aAAWnB,IAAII,IAAJ,CAASe,SAAT,CAAmBJ,IAAnB,EAHK;AAIhBK,WAASpB,IAAII,IAAJ,CAASgB,OAAT,CAAiBL,IAAjB,EAJO;AAKhBM,gBAAc,wBAASC,MAAT,CAAgB,MAAhB;AALE,EAAjB;AAOAX,mBAAWY,IAAX,CAAgBP,QAAhB;AACA,QAAOf,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BD,UAAQ,GADmB;AAE3BkB,QAAM,CACJ;AACCP,OAAID,SAASC,EADd;AAECH,SAAME,SAASF;AAFhB,GADI;AAFqB,EAArB,CAAP;AASA,CApCD;;AAsCA;AACAhB,QAAQ2B,cAAR,GAAyB,gBAAgBzB,GAAhB,EAAqBC,GAArB,EAA0B;AAClD,QAAOA,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BD,UAAQ,GADmB;AAE3BkB,QAAMb;AAFqB,EAArB,CAAP;AAIA,CALD;;AAOA;AACAb,QAAQ4B,eAAR,GAA0B,gBAAgB1B,GAAhB,EAAqBC,GAArB,EAA0B;AACnD;AADmD,KAE3CgB,EAF2C,GAEpCjB,IAAI2B,MAFgC,CAE3CV,EAF2C;;AAGnD,KAAI,CAACW,OAAOC,SAAP,CAAiBC,SAASb,EAAT,EAAa,EAAb,CAAjB,CAAL,EAAyC;AACxC,SAAOhB,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BD,WAAQ,GADmB;AAE3BD,UAAUY,EAAV;AAF2B,GAArB,CAAP;AAIA,EALD,MAKO;AACN,MAAMP,QAAQ,MAAMC,kBAAWC,IAAX,CAAgB;AAAA,UAAKC,EAAEI,EAAF,KAASa,SAASb,EAAT,EAAa,EAAb,CAAd;AAAA,GAAhB,CAApB;AACA,MAAIP,KAAJ,EAAW;AACV,UAAOT,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BD,YAAQ,GADmB;AAE3BkB,UAAMd;AAFqB,IAArB,CAAP;AAIA,GALD,MAKO;AACN,UAAOT,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BD,YAAQ,GADmB;AAE3BD,6BAAuBY,EAAvB;AAF2B,IAArB,CAAP;AAIA;AACD;AACD,CAtBD;;AAwBA;AACAnB,QAAQiC,SAAR,GAAoB,gBAAgB/B,GAAhB,EAAqBC,GAArB,EAA0B;AAC7C;AAD6C,6BAE3BC,qBAAU8B,iBAAV,CAA4BhC,IAAII,IAAhC,CAF2B;AAAA,KAErCC,KAFqC,yBAErCA,KAFqC;;AAG7C,KAAIA,KAAJ,EAAW;AACV,SAAOJ,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BD,WAAQ,GADmB;AAE3BD,UAAOA,MAAMG,OAAN,CAAc,CAAd,EAAiBC;AAFG,GAArB,CAAP;AAIA;AACD;AACA;AAV6C,KAWrCQ,EAXqC,GAW9BjB,IAAI2B,MAX0B,CAWrCV,EAXqC;;AAY7C,KAAI,CAACW,OAAOC,SAAP,CAAiBC,SAASb,EAAT,EAAa,EAAb,CAAjB,CAAL,EAAyC;AACxC,SAAOhB,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BD,WAAQ,GADmB;AAE3BD,UAAUY,EAAV;AAF2B,GAArB,CAAP;AAIA;AACD;AACA,KAAMP,QAAQ,MAAMC,kBAAWC,IAAX,CAAgB;AAAA,SAAKC,EAAEI,EAAF,KAASa,SAASb,EAAT,EAAa,EAAb,CAAd;AAAA,EAAhB,CAApB;AACA,KAAI,CAACP,KAAL,EAAY;AACX,SAAOT,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BD,WAAQ,GADmB;AAE3BD,gCAA2BY,EAA3B;AAF2B,GAArB,CAAP;AAIA;AACD;AACA,KAAMgB,eAAe;AACpBnB,QAAMd,IAAII,IAAJ,CAASU;AADK,EAArB;AAGAJ,OAAMI,IAAN,GAAamB,aAAanB,IAA1B;AACA,QAAOb,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BD,UAAQ,GADmB;AAE3BkB,QAAM,CACJ;AACCP,OAAIP,MAAMO,EADX;AAECH,SAAMmB,aAAanB;AAFpB,GADI;AAFqB,EAArB,CAAP;AASA,CAxCD;;AA0CA;AACAhB,QAAQoC,WAAR,GAAsB,gBAAgBlC,GAAhB,EAAqBC,GAArB,EAA0B;AAC/C;AAD+C,KAEvCgB,EAFuC,GAEhCjB,IAAI2B,MAF4B,CAEvCV,EAFuC;;AAG/C,KAAI,CAACW,OAAOC,SAAP,CAAiBC,SAASb,EAAT,EAAa,EAAb,CAAjB,CAAL,EAAyC;AACxC,SAAOhB,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BD,WAAQ,GADmB;AAE3BD,UAAUY,EAAV;AAF2B,GAArB,CAAP;AAIA;AACD;AACA,KAAMP,QAAQ,MAAMC,kBAAWC,IAAX,CAAgB;AAAA,SAAKC,EAAEI,EAAF,KAASa,SAASb,EAAT,EAAa,EAAb,CAAd;AAAA,EAAhB,CAApB;AACA,KAAI,CAACP,KAAL,EAAY;AACX,SAAOT,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BD,WAAQ,GADmB;AAE3BD,gCAA2BY,EAA3B;AAF2B,GAArB,CAAP;AAIA;AACD;AACAN,mBAAWwB,GAAX,CAAe,UAACC,OAAD,EAAUC,KAAV,EAAoB;AAClC,MAAID,QAAQnB,EAAR,IAAcA,EAAlB,EAAsB;AACrBN,qBAAW2B,MAAX,CAAkBD,KAAlB,EAAyB,CAAzB;AACA,UAAOpC,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BD,YAAQ,GADmB;AAE3BkB,UAAM,CACL;AACCf,cAAS;AADV,KADK;AAFqB,IAArB,CAAP;AAQA;AACD,EAZD;AAaA,CA/BD","file":"parties.js","sourcesContent":["import partyModel from '../models/parties';\nimport validator from '../middlewares/validation';\nimport moment from 'moment';\n\n// create Party\nexports.createParty = async function (req, res) {\n\t// Joi Validation\n\tconst { error } = validator.validateCreateParty(req.body);\n\tif (error) {\n\t\treturn res.status(400).json({\n\t\t\tstatus: 400,\n\t\t\terror: error.details[0].message\n\t\t});\n\t}\n\t// Custom Validation\n\t// Check if party is already registered\n\tconst party = await partyModel.find(p => p.name === req.body.name.trim());\n\tif (party) {\n\t\treturn res.status(400).json({\n\t\t\tstatus: 400,\n\t\t\terror: `The party of name: <${req.body.name}> is already registered.`\n\t\t});\n\t}\n\t// Register party\n\tconst newParty = {\n\t\tid: partyModel.length + 1,\n\t\tname: req.body.name.trim(),\n\t\thqaddress: req.body.hqaddress.trim(),\n\t\tlogourl: req.body.logourl.trim(),\n\t\tregisteredon: moment().format('LLLL')\n\t};\n\tpartyModel.push(newParty);\n\treturn res.status(201).json({\n\t\tstatus: 201,\n\t\tdata: [\n\t\t  {\n\t\t  \tid: newParty.id,\n\t\t  \tname: newParty.name\n\t\t  }\n\t\t]\n\t});\n};\n\n// view all Parties\nexports.viewAllParties = async function (req, res) {\n\treturn res.status(200).json({\n\t\tstatus: 200,\n\t\tdata: partyModel\n\t});\n};\n\n// view single Party\nexports.viewSingleParty = async function (req, res) {\n\t// Check if param is integer\n\tconst { id } = req.params;\n\tif (!Number.isInteger(parseInt(id, 10))) {\n\t\treturn res.status(400).json({\n\t\t\tstatus: 400,\n\t\t\terror: `${id} must be an integer`\n\t\t});\n\t} else {\n\t\tconst party = await partyModel.find(p => p.id === parseInt(id, 10));\n\t\tif (party) {\n\t\t\treturn res.status(200).json({\n\t\t\t\tstatus: 200,\n\t\t\t\tdata: party\n\t\t\t});\n\t\t} else {\n\t\t\treturn res.status(404).json({\n\t\t\t\tstatus: 404,\n\t\t\t\terror: `Party of id: ${id} not found`\n\t\t\t});\n\t\t}\n\t}\n};\n\n// edit Party\nexports.editParty = async function (req, res) {\n\t// Joi Validation\n\tconst { error } = validator.validateEditParty(req.body);\n\tif (error) {\n\t\treturn res.status(400).json({\n\t\t\tstatus: 400,\n\t\t\terror: error.details[0].message\n\t\t});\n\t}\n\t// Custom Validation\n\t// Check if id is integer\n\tconst { id } = req.params;\n\tif (!Number.isInteger(parseInt(id, 10))) {\n\t\treturn res.status(400).json({\n\t\t\tstatus: 400,\n\t\t\terror: `${id} must be an integer`\n\t\t});\n\t}\n\t// Check if party is already registered\n\tconst party = await partyModel.find(p => p.id === parseInt(id, 10));\n\tif (!party) {\n\t\treturn res.status(404).json({\n\t\t\tstatus: 404,\n\t\t\terror: `The party of id: ${id} does not exist.`\n\t\t});\n\t}\n\t// Update party\n\tconst newPartyName = {\n\t\tname: req.body.name\n\t};\n\tparty.name = newPartyName.name;\n\treturn res.status(200).json({\n\t\tstatus: 200,\n\t\tdata: [\n\t\t  {\n\t\t  \tid: party.id,\n\t\t  \tname: newPartyName.name\n\t\t  }\n\t\t]\n\t});\n};\n\n// delete Party\nexports.deleteParty = async function (req, res) {\n\t// Check if id is integer\n\tconst { id } = req.params;\n\tif (!Number.isInteger(parseInt(id, 10))) {\n\t\treturn res.status(400).json({\n\t\t\tstatus: 400,\n\t\t\terror: `${id} must be an integer`\n\t\t});\n\t}\n\t// Check if party exists\n\tconst party = await partyModel.find(p => p.id === parseInt(id, 10));\n\tif (!party) {\n\t\treturn res.status(404).json({\n\t\t\tstatus: 404,\n\t\t\terror: `The party of id: ${id} does not exist.`\n\t\t});\n\t}\n\t// Delete party\n\tpartyModel.map((parties, index) => {\n\t\tif (parties.id == id) {\n\t\t\tpartyModel.splice(index, 1);\n\t\t\treturn res.status(200).json({\n\t\t\t\tstatus: 200,\n\t\t\t\tdata: [\n\t\t\t\t\t{\n\t\t\t\t\t\tmessage: 'Party deleted successfully!'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t});\n\t\t}\n\t});\n};\n"]}