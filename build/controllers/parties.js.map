{"version":3,"sources":["../../src/controllers/parties.js"],"names":["exports","createParty","req","res","validator","validateCreateParty","body","error","status","json","details","message","newParty","id","partyModel","length","name","hqaddress","logourl","registeredon","format","push","data","viewAllParties","viewSingleParty","params","Number","isInteger","parseInt","party","find","p","editParty","validateEditParty","partyName","newPartyName","deleteParty","map","parties","index","splice"],"mappings":"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","file":"parties.js","sourcesContent":["import partyModel from '../models/parties';\nimport validator from '../middlewares/validation';\nimport moment from 'moment';\n\n// create Party\nexports.createParty = async function (req, res) {\n\t// Joi Validation\n\tconst { error } = validator.validateCreateParty(req.body);\n\tif (error) {\n\t\treturn res.status(400).json({\n\t\t\tstatus: 400,\n\t\t\terror: error.details[0].message\n\t\t});\n\t}\n\t// Custom Validation\n\n\t// // Check if party is already registered\n\t// const party = await partyModel.find(p => p.name === req.body.name);\n\t// if (party) {\n\t// \treturn res.status(400).json({\n\t// \t\tstatus: 400,\n\t// \t\terror: `The party ${req.body.name} is already registered.`\n\t// \t});\n\t// }\n\t// Register party\n\tconst newParty = {\n\t\tid: partyModel.length + 1,\n\t\tname: req.body.name,\n\t\thqaddress: req.body.hqaddress,\n\t\tlogourl: req.body.logourl,\n\t\tregisteredon: moment().format('LLLL')\n\t};\n\tpartyModel.push(newParty);\n\treturn res.status(201).json({\n\t\tstatus: 201,\n\t\tdata: [\n\t\t  {\n\t\t  \tid: newParty.id,\n\t\t  \tname: newParty.name\n\t\t  }\n\t\t]\n\t});\n};\n\n// view all Parties\nexports.viewAllParties = async function (req, res) {\n\treturn res.status(200).json({\n\t\tstatus: 200,\n\t\tdata: partyModel\n\t});\n};\n\n// view single Party\nexports.viewSingleParty = async function (req, res) {\n\t// Check if param is integer\n\tconst { id } = req.params;\n\tif (!Number.isInteger(parseInt(id, 10))) {\n\t\treturn res.status(400).json({\n\t\t\tstatus: 400,\n\t\t\terror: `${id} must be an integer`\n\t\t});\n\t} else {\n\t\tconst party = await partyModel.find(p => p.id === parseInt(id, 10));\n\t\tif (party) {\n\t\t\treturn res.status(200).json({\n\t\t\t\tstatus: 200,\n\t\t\t\tdata: party\n\t\t\t});\n\t\t} else {\n\t\t\treturn res.status(404).json({\n\t\t\t\tstatus: 404,\n\t\t\t\terror: `Party of id: ${id} not found`\n\t\t\t});\n\t\t}\n\t}\n};\n\n// edit Party\nexports.editParty = async function (req, res) {\n\t// Joi Validation\n\tconst { error } = validator.validateEditParty(req.body);\n\tif (error) {\n\t\treturn res.status(400).json({\n\t\t\tstatus: 400,\n\t\t\terror: error.details[0].message\n\t\t});\n\t}\n\t// Custom Validation\n\t// Check if id is integer\n\tconst { id, name } = req.params;\n\tif (!Number.isInteger(parseInt(id, 10))) {\n\t\treturn res.status(400).json({\n\t\t\tstatus: 400,\n\t\t\terror: `${id} must be an integer`\n\t\t});\n\t}\n\t// Check if party is already registered\n\tconst party = await partyModel.find(p => p.id === parseInt(id, 10));\n\tif (!party) {\n\t\treturn res.status(404).json({\n\t\t\tstatus: 404,\n\t\t\terror: `The party of id: ${id} does not exist.`\n\t\t});\n\t}\n\tconst partyName = await partyModel.find(p => p.name === name);\n\tif (!partyName) {\n\t\treturn res.status(404).json({\n\t\t\tstatus: 404,\n\t\t\terror: `The party of name: ${name} does not exist.`\n\t\t});\n\t}\n\t// Check if id and name is for same party\n\tif (party.id !== partyName.id) {\n\t\treturn res.status(404).json({\n\t\t\tstatus: 404,\n\t\t\terror: `Party of id: ${id} and name: ${name} not found.`\n\t\t});\n\t}\n\t// Update party\n\tconst newPartyName = {\n\t\tname: req.body.name\n\t};\n\tpartyName.name = newPartyName.name;\n\treturn res.status(200).json({\n\t\tstatus: 200,\n\t\tdata: [\n\t\t  {\n\t\t  \tid: partyName.id,\n\t\t  \tname: newPartyName.name\n\t\t  }\n\t\t]\n\t});\n};\n\n// delete Party\nexports.deleteParty = async function (req, res) {\n\t// Check if id is integer\n\tconst { id } = req.params;\n\tif (!Number.isInteger(parseInt(id, 10))) {\n\t\treturn res.status(400).json({\n\t\t\tstatus: 400,\n\t\t\terror: `${id} must be an integer`\n\t\t});\n\t}\n\t// Check if party exists\n\tconst party = await partyModel.find(p => p.id === parseInt(id, 10));\n\tif (!party) {\n\t\treturn res.status(404).json({\n\t\t\tstatus: 404,\n\t\t\terror: `The party of id: ${id} does not exist.`\n\t\t});\n\t}\n\t// Delete party\n\tpartyModel.map((parties, index) => {\n\t\tif (parties.id == id) {\n\t\t\tpartyModel.splice(index, 1);\n\t\t\treturn res.status(200).json({\n\t\t\t\tstatus: 200,\n\t\t\t\tdata: [\n\t\t\t\t\t{\n\t\t\t\t\t\tmessage: 'Party deleted successfully!'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t});\n\t\t}\n\t});\n};\n"]}