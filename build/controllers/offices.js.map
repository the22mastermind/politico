{"version":3,"sources":["../../src/controllers/offices.js"],"names":["exports","createOffice","req","res","office","officeModel","find","o","type","body","trim","name","status","json","error","newOffice","id","length","push","data","viewAllOffices","viewSpecificOffice","params","Number","isInteger","parseInt"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;;;;;AAEA;;AAJA;AAKAA,QAAQC,YAAR,GAAuB,gBAAgBC,GAAhB,EAAqBC,GAArB,EAA0B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAMC,SAAS,MAAMC,kBAAYC,IAAZ,CAAiB;AAAA,SAAKC,EAAEC,IAAF,KAAWN,IAAIO,IAAJ,CAASD,IAAT,CAAcE,IAAd,EAAX,IAAmCH,EAAEI,IAAF,KAAWT,IAAIO,IAAJ,CAASE,IAAT,CAAcD,IAAd,EAAnD;AAAA,EAAjB,CAArB;AACA,KAAIN,MAAJ,EAAY;AACX,SAAOD,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BD,WAAQ,GADmB;AAE3BE,oCAA+BZ,IAAIO,IAAJ,CAASD,IAAT,CAAcE,IAAd,EAA/B,qBAAmER,IAAIO,IAAJ,CAASE,IAAT,CAAcD,IAAd,EAAnE;AAF2B,GAArB,CAAP;AAIA;AACD;AACA,KAAMK,YAAY;AACjBC,MAAIX,kBAAYY,MAAZ,GAAqB,CADR;AAEjBT,QAAMN,IAAIO,IAAJ,CAASD,IAAT,CAAcE,IAAd,EAFW;AAGjBC,QAAMT,IAAIO,IAAJ,CAASE,IAAT,CAAcD,IAAd;AAHW,EAAlB;AAKAL,mBAAYa,IAAZ,CAAiBH,SAAjB;AACA,QAAOZ,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BD,UAAQ,GADmB;AAE3BO,QAAM,CACJ;AACCH,OAAID,UAAUC,EADf;AAECR,SAAMO,UAAUP,IAFjB;AAGCG,SAAMI,UAAUJ;AAHjB,GADI;AAFqB,EAArB,CAAP;AAUA,CA1CD;;AA4CA;AACAX,QAAQoB,cAAR,GAAyB,gBAAgBlB,GAAhB,EAAqBC,GAArB,EAA0B;AAClD,QAAOA,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BD,UAAQ,GADmB;AAE3BO,QAAMd;AAFqB,EAArB,CAAP;AAIA,CALD;;AAOA;AACAL,QAAQqB,kBAAR,GAA6B,gBAAgBnB,GAAhB,EAAqBC,GAArB,EAA0B;AACtD;AADsD,KAE9Ca,EAF8C,GAEvCd,IAAIoB,MAFmC,CAE9CN,EAF8C;;AAGtD,KAAI,CAACO,OAAOC,SAAP,CAAiBC,SAAST,EAAT,EAAa,EAAb,CAAjB,CAAL,EAAyC;AACxC,SAAOb,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BD,WAAQ,GADmB;AAE3BE,UAAUE,EAAV;AAF2B,GAArB,CAAP;AAIA,EALD,MAKO;AACN,MAAMZ,SAAS,MAAMC,kBAAYC,IAAZ,CAAiB;AAAA,UAAKC,EAAES,EAAF,KAASS,SAAST,EAAT,EAAa,EAAb,CAAd;AAAA,GAAjB,CAArB;AACA,MAAIZ,MAAJ,EAAY;AACX,UAAOD,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BD,YAAQ,GADmB;AAE3BO,UAAMf;AAFqB,IAArB,CAAP;AAIA,GALD,MAKO;AACN,UAAOD,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BD,YAAQ,GADmB;AAE3BE,8BAAwBE,EAAxB;AAF2B,IAArB,CAAP;AAIA;AACD;AACD,CAtBD","file":"offices.js","sourcesContent":["import officeModel from '../models/offices';\n// import validator from '../middlewares/validation';\nimport checkEmptySpaces from '../middlewares/custom';\nimport moment from 'moment';\n\n// create Party\nexports.createOffice = async function (req, res) {\n\t// Joi Validation\n\t// const { error } = validator.validateCreateOffice(req.body);\n\t// if (error) {\n\t// \treturn res.status(400).json({\n\t// \t\tstatus: 400,\n\t// \t\terror: error.details[0].message\n\t// \t});\n\t// }\n\t// Custom validation\n\t// const officeChecker = checkEmptySpaces.createOfficeChecker(req.body);\n\t// if (officeChecker) {\n\t// \treturn res.status(400).json({\n\t// \t\tstatus: 400,\n\t// \t\terror: officeChecker.error\n\t// \t});\n\t// }\n\t// Check if office (type and name) is already registered\n\tconst office = await officeModel.find(o => o.type === req.body.type.trim() && o.name === req.body.name.trim());\n\tif (office) {\n\t\treturn res.status(400).json({\n\t\t\tstatus: 400,\n\t\t\terror: `The office of type: <${req.body.type.trim()}> and name: <${req.body.name.trim()}> is already registered.`\n\t\t});\n\t}\n\t// Register office\n\tconst newOffice = {\n\t\tid: officeModel.length + 1,\n\t\ttype: req.body.type.trim(),\n\t\tname: req.body.name.trim()\n\t};\n\tofficeModel.push(newOffice);\n\treturn res.status(201).json({\n\t\tstatus: 201,\n\t\tdata: [\n\t\t  {\n\t\t  \tid: newOffice.id,\n\t\t  \ttype: newOffice.type,\n\t\t  \tname: newOffice.name\n\t\t  }\n\t\t]\n\t});\n};\n\n// view all offices\nexports.viewAllOffices = async function (req, res) {\n\treturn res.status(200).json({\n\t\tstatus: 200,\n\t\tdata: officeModel\n\t});\n};\n\n// view specific office\nexports.viewSpecificOffice = async function (req, res) {\n\t// Check if param is integer\n\tconst { id } = req.params;\n\tif (!Number.isInteger(parseInt(id, 10))) {\n\t\treturn res.status(400).json({\n\t\t\tstatus: 400,\n\t\t\terror: `${id} must be an integer`\n\t\t});\n\t} else {\n\t\tconst office = await officeModel.find(o => o.id === parseInt(id, 10));\n\t\tif (office) {\n\t\t\treturn res.status(200).json({\n\t\t\t\tstatus: 200,\n\t\t\t\tdata: office\n\t\t\t});\n\t\t} else {\n\t\t\treturn res.status(404).json({\n\t\t\t\tstatus: 404,\n\t\t\t\terror: `Office of id: ${id} not found`\n\t\t\t});\n\t\t}\n\t}\n};\n"]}