{"version":3,"sources":["../../src/controllers/users.js"],"names":["exports","userSignup","req","res","validator","validateSignUp","body","error","status","json","details","message","user","userModel","find","u","email","newUser","id","length","firstname","lastname","othername","password","phonenumber","passporturl","isadmin","registeredon","format","push","data"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;AACAA,QAAQC,UAAR,GAAqB,gBAAgBC,GAAhB,EAAqBC,GAArB,EAA0B;AAC9C;AAD8C,6BAE5BC,qBAAUC,cAAV,CAAyBH,IAAII,IAA7B,CAF4B;AAAA,KAEtCC,KAFsC,yBAEtCA,KAFsC;;AAG9C,KAAIA,KAAJ,EAAW;AACV,SAAOJ,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BD,WAAQ,GADmB;AAE3BD,UAAOA,MAAMG,OAAN,CAAc,CAAd,EAAiBC;AAFG,GAArB,CAAP;AAIA;AACD;AACA,KAAMC,OAAO,MAAMC,gBAAUC,IAAV,CAAe;AAAA,SAAKC,EAAEC,KAAF,KAAYd,IAAII,IAAJ,CAASU,KAA1B;AAAA,EAAf,CAAnB;AACA,KAAIJ,IAAJ,EAAU;AACT,SAAOT,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BD,WAAQ,GADmB;AAE3BD,yBAAoBL,IAAII,IAAJ,CAASU,KAA7B;AAF2B,GAArB,CAAP;AAIA;AACD;AACA,KAAMC,UAAU;AACfC,MAAIL,gBAAUM,MAAV,GAAmB,CADR;AAEfC,aAAWlB,IAAII,IAAJ,CAASc,SAFL;AAGfC,YAAUnB,IAAII,IAAJ,CAASe,QAHJ;AAIfC,aAAWpB,IAAII,IAAJ,CAASgB,SAJL;AAKfN,SAAOd,IAAII,IAAJ,CAASU,KALD;AAMfO,YAAUrB,IAAII,IAAJ,CAASiB,QANJ;AAOfC,eAAatB,IAAII,IAAJ,CAASkB,WAPP;AAQfC,eAAavB,IAAII,IAAJ,CAASmB,WARP;AASfC,WAAS,KATM;AAUfC,gBAAc,wBAASC,MAAT,CAAgB,MAAhB;AAVC,EAAhB;AAYAf,iBAAUgB,IAAV,CAAeZ,OAAf;AACA,QAAOd,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BD,UAAQ,GADmB;AAE3BsB,QAAM,CACJ;AACCV,cAAWH,QAAQG,SADpB;AAECC,aAAUJ,QAAQI,QAFnB;AAGCC,cAAWL,QAAQK,SAHpB;AAICN,UAAOC,QAAQD,KAJhB;AAKCQ,gBAAaP,QAAQO,WALtB;AAMCE,YAAST,QAAQS,OANlB;AAOCC,iBAAcV,QAAQU;AAPvB,GADI,CAFqB;AAa3BhB,WAAS;AAbkB,EAArB,CAAP;AAeA,CA9CD","file":"users.js","sourcesContent":["import userModel from '../models/users';\nimport validator from '../middlewares/validation';\nimport moment from 'moment';\n\n// User signup\nexports.userSignup = async function (req, res) {\n\t// Joi Validation\n\tconst { error } = validator.validateSignUp(req.body);\n\tif (error) {\n\t\treturn res.status(400).json({\n\t\t\tstatus: 400,\n\t\t\terror: error.details[0].message\n\t\t});\n\t}\n\t// Check if email is already registered\n\tconst user = await userModel.find(u => u.email === req.body.email);\n\tif (user) {\n\t\treturn res.status(400).json({\n\t\t\tstatus: 400,\n\t\t\terror: `The email ${req.body.email} is already registered.`\n\t\t});\n\t}\n\t// Register user\n\tconst newUser = {\n\t\tid: userModel.length + 1,\n\t\tfirstname: req.body.firstname,\n\t\tlastname: req.body.lastname,\n\t\tothername: req.body.othername,\n\t\temail: req.body.email,\n\t\tpassword: req.body.password,\n\t\tphonenumber: req.body.phonenumber,\n\t\tpassporturl: req.body.passporturl,\n\t\tisadmin: false,\n\t\tregisteredon: moment().format('LLLL')\n\t};\n\tuserModel.push(newUser);\n\treturn res.status(201).json({\n\t\tstatus: 201,\n\t\tdata: [\n\t\t  {\n\t\t  \tfirstname: newUser.firstname,\n\t\t  \tlastname: newUser.lastname,\n\t\t  \tothername: newUser.othername,\n\t\t  \temail: newUser.email,\n\t\t  \tphonenumber: newUser.phonenumber,\n\t\t  \tisadmin: newUser.isadmin,\n\t\t  \tregisteredon: newUser.registeredon\n\t\t  }\n\t\t],\n\t\tmessage: 'Success!'\n\t});\n};\n"]}